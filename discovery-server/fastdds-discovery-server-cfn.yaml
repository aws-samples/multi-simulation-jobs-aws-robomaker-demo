AWSTemplateFormatVersion: 2010-09-09
Description:  This template deploys a VPC in either us-east-1, with a pair of public and private subnets spread
  across two Availability Zones (us-east-1a, us-east-1b). It deploys an internet gateway, with a default
  route on the public subnets, a Linux t2.micro Instance with Security Group with setup FastDDS
    
Mappings:
  RegionMap:
    us-east-1:
     "AMI": "ami-0557a15b87f6559cf" # Ubuntu 22.04
    us-west-2:
     "AMI": "ami-0735c191cf914754d" # Ubuntu 22.04

Resources:
  RoboMakerSimulationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - robomaker.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - ''
              - - RoboMakerSimulationPolicy-
                - Ref: AWS::Region
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - robomaker:StartSimulationJobBatch
                  - robomaker:ListSimulationJobs
                  - robomaker:ListSimulationJobBatches
                  - robomaker:ListTagsForResource
                  - robomaker:CreateSimulationJob
                  - robomaker:CancelSimulationJob
                  - robomaker:UntagResource
                  - robomaker:TagResource
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                  - ecr-public:DescribeImages
                  - ecr-public:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: "*"
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: RoboMaker-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: RoboMaker-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: RoboMaker Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1b'
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: RoboMaker Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: RoboMaker Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1b'
      CidrBlock: 10.0.12.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: RoboMaker Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RoboMaker Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
      
  RoboMakerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ROS2 DDS Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          Description: allow TCP ports for ROS2 DDS
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          Description: allow UDP ports for ROS2 DDS
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: allow ssh port
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      VpcId: !Ref VPC
      
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !Ref RoboMakerSecurityGroup
      Monitoring: true
      Tags:
       - Key: Name
         Value: FastDDS Discovery Server EC2 instance
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -v
            
            cd /home/ubuntu
            sudo apt-get update
            sudo apt-get install -y cmake g++ gcc
            sudo apt-get install -y python3-pip wget git unzip
            sudo apt-get install -y libasio-dev libtinyxml2-dev libssl-dev
            sudo python3 -m pip install --upgrade pip && python3 -m pip install colcon-common-extensions vcstool requests lxml

            # Fast-DDS 2.9.1
            mkdir -p /home/ubuntu/Fast-DDS/src
            cd /home/ubuntu/Fast-DDS
            wget https://raw.githubusercontent.com/eProsima/Fast-DDS/2.9.1/fastrtps.repos
            vcs import src < fastrtps.repos
            cd /home/ubuntu
            echo 'source /home/ubuntu/Fast-DDS/install/setup.bash ' >> ~/.bashrc

            echo '##### starting configuration #####'
            cat << EOF > /home/ubuntu/discovery-server.xml
            <?xml version="1.0" encoding="UTF-8" ?>
            <dds>
                <profiles xmlns="http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles">
                    <transport_descriptors>
                        <transport_descriptor>
                            <transport_id>TCPv4_SERVER</transport_id>
                            <type>TCPv4</type>
                            <listening_ports>
                                <port>9843</port>
                                <port>64863</port>
                            </listening_ports>
                            <wan_addr>10.0.18.239</wan_addr> <!-- This subscriber computer WAN address -->
                        </transport_descriptor>
                    </transport_descriptors>
                    <participant profile_name="participant_server" is_default_profile="true">
                        <rtps>
                            <prefix>
                                44.53.00.5f.45.50.52.4f.53.49.4d.41 <!-- 12-byte server unique id -->
                            </prefix>
                            <userTransports>
                                <transport_id>TCPv4_SERVER</transport_id>
                            </userTransports>
                            <useBuiltinTransports>false</useBuiltinTransports>
            
                            <builtin>
                                <discovery_config>
                                    <discoveryProtocol>SERVER</discoveryProtocol> <!-- participant is metatrafic hub -->
                                    <leaseDuration>
                                        <sec>DURATION_INFINITY</sec>
                                    </leaseDuration>
                                </discovery_config>
                                <metatrafficUnicastLocatorList> <!-- here server listening for clients metatrafic -->
                                    <locator>
                                        <tcpv4>
                                            <!-- if no address is provided the server would export all its public interfaces as address -->
                                            <!-- this is a logical port, the physical one is specify as listening port above -->
                                            <physical_port>9843</physical_port>
                                            <port>64863</port>
                                            <wan_address>10.0.18.239</wan_address>
                                        </tcpv4>
                                    </locator>
                                </metatrafficUnicastLocatorList>
                            </builtin>
                        </rtps>
                    </participant>
                </profiles>
            </dds>
            EOF
            cat -  << 'EOFPY' > /home/ubuntu/config_discovery_server.py
            import json
            from lxml import etree
            import requests  # pip install requests
            
            """
            This is a Python script to set the Instance private IP in FastDDS Discovery Server configuration xml file.
            """
            
            
            def set_host_ip_at_xml(xml_default_path, xml_file_path, host_ip_addr):
                tree = etree.parse(xml_default_path)
                root = tree.getroot()
                for profiles in root:
                    name_space = {"fastdds": "http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles"}
                    wan_addr = profiles.find('fastdds:transport_descriptors', name_space) \
                        .find('fastdds:transport_descriptor', name_space) \
                        .find('fastdds:wan_addr', name_space)
                    wan_addr.text = host_ip_addr
            
                    wan_address = profiles.find('fastdds:participant', name_space) \
                        .find('fastdds:rtps', name_space) \
                        .find('fastdds:builtin', name_space) \
                        .find('fastdds:metatrafficUnicastLocatorList', name_space) \
                        .find('fastdds:locator', name_space) \
                        .find('fastdds:tcpv4', name_space) \
                        .find('fastdds:wan_address', name_space)
                    wan_address.text = host_ip_addr
                tree.write(xml_file_path, encoding="utf-8", xml_declaration=True)
            
            
            if __name__ == "__main__":
                FASTRTPS_DS_TEMPLATE = "discovery-server.xml"
                r = requests.get('http://169.254.169.254/latest/dynamic/instance-identity/document')
                instance_details = json.loads(r.text)
                host_ip_addr = instance_details['privateIp']
                print(f"The discovery server instance's private IP is {host_ip_addr}")
                set_host_ip_at_xml(FASTRTPS_DS_TEMPLATE, FASTRTPS_DS_TEMPLATE, host_ip_addr)
                print("FastDDS Discovery Server settings configured.")
            EOFPY
            cd /home/ubuntu
            python3 config_discovery_server.py
            echo '##### finished configuration - discovery-server.xml #####'


            ### 8. COMPLETION

            # Signal creation complete
            #wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.zip
            #unzip aws-cfn-bootstrap-py3-latest.zip
            #cd aws-cfn-bootstrap-2.0/
            #python3 setup.py install
            sudo mkdir -p /opt/aws/
            sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
            cd /home/ubuntu/Fast-DDS
            colcon build &
            sleep 900
            
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
            reboot

Outputs:
  PublicIp:
    Description: EC2 Instance Public Ip
    Value: !GetAtt EC2Instance.PublicIp
  PrivateIp:
    Description: EC2 Instance Private Ip
    Value: !GetAtt EC2Instance.PrivateIp
  RoboMakerSimulationRoleArn:
    Value: !GetAtt RoboMakerSimulationRole.Arn
  PublicSubnet1:
    Description: RoboMaker Public subnet 1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: RoboMaker Public subnet 2
    Value: !Ref PublicSubnet2
  SecurityGroup:
    Description: RoboMaker SecurityGroup
    Value: !Ref RoboMakerSecurityGroup